---
format: 
  html:
    code-fold: true
execute: 
  eval: false
---

# Supply Deprecation


The supply deprecation model is shortened into 3 functions for model building. 

## Data Extraction

```{r}
dep_model_data <- function(sample_size=1000, seed = 100) {
  message("retrieving model sales data")
  # retrieve daily order qty from locally hosted sql copy from cubes
  # as dbplyr objects
  conn <- sql_conn()
  tab <- tbl(conn, "order_qty_by_acct_style_and_date")
  tab_act <- tbl(conn, "acct_attributes")
  
  
  # set the dates that will be used as params for defining deprecated or live styles
  dep_date <- as.character(Sys.Date()-180)
  rec_date <- as.character(Sys.Date()-30)
  
  orders <- tab |>
    group_by(account, style) |>
    mutate(dep = max(date) <= dep_date) |>
    ungroup() |>
    left_join(
      tab_act |>
        select(account, key_account, region) #, account_open_date)
    )
  
  
  sample.dep <- orders |>
    filter(dep == TRUE) |>
    select(account, style, dep) |>
    distinct() |>
    collect() |>
    setDT()
  
  set.seed(seed)
  sample.dep <- merge(sample.dep[,.(account, style)][,unique(.SD)][sample(.N, sample_size)]
                      , orders)
  
  
  sample.liv <- orders |>
    filter(dep == FALSE & date >= rec_date) |>
    select(account, style, dep) |>
    collect() |>
    setDT()
  
  set.seed(seed)
  sample.liv <- merge(sample.liv[,.(account, style)][,unique(.SD)][sample(.N, sample_size)]
                      , orders)
  
  
  DBI::dbDisconnect(conn)
  
  # concatenate two tables and clean fields up a bit. We'll make some
  # calculations to use in features here too. 
  sample_data <- rbind(sample.dep, sample.liv)
  sample_data[, date := lubridate::as_date(date)]
  sample_data[,`:=`(qty_frac = {qty / sum(qty)}
                    , t_dep = {as.integer(date - max(date))}
                    , uid = paste(account, style)
  )
  , .(account, style)
  ]
  sample_data[,rollsum := runner::sum_run(qty, 7, idx = date, na_pad = F), uid]
  # sample_data[,account_open_date := as.numeric(Sys.Date() - as.Date(account_open_date))%/%365]
  
  message("completed pull of sales data")
  
  sample_data[]
}
```


This function retrieves and creates sample data to be used in a model. The function takes two parameters, sample_size and seed, with default values of 1000 and 100 respectively. It then connects to a SQL copy of cubes and retrieves two tables, order_qty_by_acct_style_and_date and acct_attributes. It then sets two dates, dep_date and rec_date, which will be used to define deprecated or live styles. It then retrieves orders from the first table, groups them by account and style, and adds the dep column, which will be used to filter out the deprecated styles. It then left joins the second table, selects the relevant fields, and samples the deprecated and live styles. It then disconnects from the SQL copy and creates a new table with the sampled data, adding some calculated fields and a field for rolling sum. Finally, it prints a message that the pull of sales data is complete and returns the sample data.

## Features

The next function is `dep_model_features` which takes a sample data set as an argument. It creates several functions that are used to generate various features based on the data. These features include the mean and standard deviation of order breaks, the slope of order breaks and rolling sums, and the ratio of the most recent order to the largest order placed. The code also queries a cube for the previous month's orders and merges the features with the data from the cube. Finally, it returns the new features.

## Modelling

```{r}
dep_model_rf <- function(features, seed = 100) {
  
  message("training model")
  
  warning(nrow(features[is.na(key_account)]), " removed because of NA in key_account")
  features <- features[!is.na(key_account)]
  
  set.seed(seed)
  train <- features[sample(.N, .8*.N, replace = F)]
  test <- features[!train, on = names(features)]
  
  model <- randomForest::randomForest(y = as.factor(train$dep)
                        , x = train[,!c("dep", "account", "style", "uid")]
  )
  
  confusion <- caret::confusionMatrix(as.factor(test$dep), predict(model, test, type = "class"))
  print(confusion)
  
  imp <- data.table(model$importance, keep.rownames = T)[order(-MeanDecreaseGini)]
  print(imp)
  
  invisible(model)
}
```

The code above is a function to train a random forest model. It first checks for missing values in the key_account column and removes them from the data. It then randomly samples 80% of the data for the training set and uses the remaining 20% for the test set. The model is trained using the training set and the confusion matrix is printed. Last, the importance of the model is printed in descending order.

# Predicting

Once hte model is built, the model can be applied to data processed the same way as the training and test set. The data is gathered like so:

```{r}
dep_pred_data <- function(accounts) {
  # retrieve daily order qty from locally hosted sql copy from cubes
  # as dbplyr objects
  conn <- sql_conn()
  tab <- tbl(conn, "order_qty_by_acct_style_and_date")
  tab_act <- tbl(conn, "acct_attributes")
  
  
  # set the dates that will be used as params for defining deprecated or live styles
  dep_date <- as.character(Sys.Date()-180)
  rec_date <- as.character(Sys.Date()-30)
  
  filter_arg <- if (missing(accounts)) filter else \(x) filter(x, account %in% accounts)
  
  orders <- tab |>
    filter() |>
    filter_arg() |>
    group_by(account, style) |>
    mutate(dep = max(date) <= dep_date) |>
    ungroup() |>
    left_join(
      tab_act |>
        select(account, key_account, region, account_open_date)
    )
  
  datum <- orders |> collect() |> setDT()
  DBI::dbDisconnect(conn)
  
  # concatenate two tables and clean fields up a bit. We'll make some
  # calculations to use in features here too. 
  datum[, date := lubridate::as_date(date)]
  datum[,`:=`(qty_frac = {qty / sum(qty)}
              , t_dep = {as.integer(date - max(date))}
              , uid = paste(account, style)
  )
  , .(account, style)
  ]
  datum[,rollsum := runner::sum_run(qty, 7, idx = date, na_pad = F), uid]
  # datum[,account_open_date := as.numeric(Sys.Date() - as.Date(account_open_date))%/%365]
  datum[is.na(qty_frac)]$qty_frac <- 0
  
  datum
}
```

`dep_pred_data` takes an argument called accounts which can either be left missing or is a string of account numbers. The function first connects to a locally hosted sql copy from cubes, and then sets the dates (`dep_date` and `rec_date`) that will be used as parameters for defining deprecated or live styles. This is useful for the sake of creating a confusion matrix. It then creates a function called filter_arg which will be used to filter based on the accounts variable, and the orders dataframe is created. The datum object is then created and manipulated by cleaning the fields, making calculations, and setting conditions. Finally, the function returns the datum object.

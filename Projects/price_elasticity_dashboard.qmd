# Price Elasticity Dashboard

## Data

Data used are 2 years of Salesforce orders for Rocky, Georgia, and Durango downloaded and parsed from XML. Data are merged with RBDW-Prod-Model-Sales style data, notably brand and marketing group. Standard cost is supplied by the RBDW-Inventory Cube.

A time series is applied to the sales quantity in order to account for seasonal fluctuations. 

```{r}
#| echo: false

library(data.table)
library(forecast)
library(ggplot2)

orders <- structure(list(brand = c("Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot", "Georgia Boot", 
"Georgia Boot", "Georgia Boot", "Georgia Boot"), marketing_collection = c("Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland", "Homeland", "Homeland", "Homeland", "Homeland", "Homeland", 
"Homeland"), style = c("G108", "G108", "G108", "G108", "G108", 
"G108", "G108", "G108", "G108", "G108", "G108", "G108", "G108", 
"G108", "G108", "G108", "G108", "G108", "G108", "G108", "G108", 
"G108", "G108", "G108", "G108", "G108", "G108", "G108", "G108", 
"G108", "G108", "G108", "G108", "G108", "G108", "G108", "G108", 
"G108"), year = c(2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 
2020, 2020, 2020, 2020, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 
2021, 2021, 2021, 2021, 2021, 2022, 2022, 2022, 2022, 2022, 2022, 
2022, 2022, 2022, 2022, 2022, 2022, 2023, 2023), month = c(1, 
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2), date = structure(c(18262, 
18293, 18322, 18353, 18383, 18414, 18444, 18475, 18506, 18536, 
18567, 18597, 18628, 18659, 18687, 18718, 18748, 18779, 18809, 
18840, 18871, 18901, 18932, 18962, 18993, 19024, 19052, 19083, 
19113, 19144, 19174, 19205, 19236, 19266, 19297, 19327, 19358, 
19389), class = "Date"), qty = c(4, 10, 17, 21, 22, 25, 5, 17, 
22, 32, 42, 50, 27, 24, 33, 48, 35, 35, 17, 20, 23, 30, 40, 37, 
25, 26, 35, 34, 39, 27, 13, 9, 9, 5, 18, 26, 9, 8), mean_price_base = c(115, 
115, 115, 105.769230769231, 105, 105, 105, 105, 105, 105, 105, 
105, 105, 105, 105, 105, 105, 105, 105, 119.857142857143, 121, 
121, 121, 121, 126.5, 127, 127, 127, 127, 127, 127, 127, 137.285714285714, 
139, 139, 139, 139, 139), mean_price_adjustment = c(0, -14.7857142857143, 
-1.67708333333333, -3.83653846153846, -7.59821428571429, -2.77083333333333, 
-11.4, -5.25, -13, -4.76388888888889, -11.0833333333333, -12.4191176470588, 
-4.2, -6.92045454545455, -5.125, -4.71029411764706, -10.5772058823529, 
-11.090625, -9.40625, -10.5017857142857, -12.2080357142857, -10.116369047619, 
-16.6655092592593, -11.1454444444444, -7.63958333333333, -5.715, 
-12.5328947368421, -8.36705882352941, -8.96326923076923, -6.54222222222222, 
-3.81, -13.1535714285714, -13.9738095238095, -29.5375, -13.0089743589744, 
-19.4020833333333, -7.14305555555556, -7.72222222222222), mean_price_actual_n_adj = c(115, 
100.214285714286, 113.322916666667, 101.932692307692, 97.4017857142857, 
102.229166666667, 93.6, 99.75, 92, 101.402777777778, 94.2083333333333, 
92.9926470588235, 100.8, 99.5113636363636, 100.65625, 100.598529411765, 
94.7316176470588, 93.909375, 96.25, 109.355357142857, 110.23244047619, 
111.062202380952, 105.678935185185, 110.157055555556, 118.860416666667, 
121.285, 114.801315789474, 118.857058823529, 118.403076923077, 
120.457777777778, 123.19, 113.846428571429, 123.311904761905, 
114.675, 125.991025641026, 119.597916666667, 131.856944444444, 
131.277777777778), flatline = structure(c(9.71527777777778, 16.7152777777778, 
14.2777777777778, 10.4444444444444, 14.3819444444444, 22.3819444444444, 
19.8819444444444, 28.2569444444444, 29.3402777777778, 31.4861111111111, 
32.1111111111111, 38.0069444444444, 32.7152777777778, 30.7152777777778, 
30.2777777777778, 37.4444444444444, 27.3819444444444, 32.3819444444444, 
31.8819444444444, 31.2569444444444, 30.3402777777778, 29.4861111111111, 
30.1111111111111, 25.0069444444444, 30.7152777777778, 32.7152777777778, 
32.2777777777778, 23.4444444444444, 31.3819444444444, 24.3819444444444, 
27.8819444444444, 20.2569444444444, 16.3402777777778, 4.48611111111111, 
8.11111111111111, 14.0069444444444, 14.7152777777778, 14.7152777777778
), tsp = c(1, 4.08333333333333, 12), class = "ts"), seasonal = structure(c(-5.71527777777777, 
-6.71527777777778, 2.72222222222222, 10.5555555555556, 7.61805555555556, 
2.61805555555556, -14.8819444444444, -11.2569444444444, -7.34027777777778, 
0.513888888888888, 9.88888888888889, 11.9930555555556, -5.71527777777777, 
-6.71527777777778, 2.72222222222222, 10.5555555555556, 7.61805555555556, 
2.61805555555556, -14.8819444444444, -11.2569444444444, -7.34027777777778, 
0.513888888888888, 9.88888888888889, 11.9930555555556, -5.71527777777777, 
-6.71527777777778, 2.72222222222222, 10.5555555555556, 7.61805555555556, 
2.61805555555556, -14.8819444444444, -11.2569444444444, -7.34027777777778, 
0.513888888888888, 9.88888888888889, 11.9930555555556, -5.71527777777777, 
-6.71527777777778), tsp = c(1, 4.08333333333333, 12), class = "ts"), 
    trend = structure(c(NA, NA, NA, NA, NA, NA, 23.2083333333333, 
    24.75, 26, 27.7916666666667, 29.4583333333333, 30.4166666666667, 
    31.3333333333333, 31.9583333333333, 32.125, 32.0833333333333, 
    31.9166666666667, 31.2916666666667, 30.6666666666667, 30.6666666666667, 
    30.8333333333333, 30.3333333333333, 29.9166666666667, 29.75, 
    29.25, 28.625, 27.5833333333333, 25.9583333333333, 24, 22.625, 
    21.5, 20.0833333333333, NA, NA, NA, NA, NA, NA), tsp = c(1, 
    4.08333333333333, 12), class = "ts")), row.names = c(NA, 
-38L), class = c("data.table", "data.frame"))

create_ts <- function(dt, col) {
  dt <- dt[order(date)]
  t = ts(dt[[col]], freq = 12, start = dt[1, (month)])
  t
}

orders.ts <- create_ts(orders, "qty")

orders[7:10]
```

## Elasticity

To calculate elasticity, we'll use a smaller timeframe within the order history rather than the full set. The method used is the $\beta_{price}$ in an OLS regression divided by the mean quantity / mean price. See this page on [price elasticity](Research/price_elasticity.html) for more detail. 

### Elasticity Statistic

```{r}
x = orders[date >= "2021-06-01"]

styles <- x$style |> unique() |> {\(x) x[!is.na(x)]}()

xmod = copy(x)[,.(model = list(lm(qty ~ mean_price_base + seasonal, data = .SD)))
               , .(marketing_collection, brand, style)
               ][,`:=`(coeff = model[[1]][["coefficients"]][["mean_price_base"]]
                       , adjr = summary(model[[1]])[["adj.r.squared"]]
                       )
                 , .(marketing_collection, brand, style)][]

for (i in seq_along(styles)) {
  brand = x[style == styles[i]]$brand[1]
  mqty = mean(x[style == styles[i]]$qty)
  mpri = mean(x[style == styles[i]]$mean_price_base)
  
  xmod[style == styles[i]
       , `:=`( mean_price_base = mpri
               , mean_qty = mqty
               , elasticity = coeff * mpri / mqty
       )]
}
      
xmod[]

```

### Unit Change Percentage

In addition to the overall elasticity, we want to measure the change in quantity resulting from an elastic relationship. In other words, if we raise the price $1, what is the percent change in quantity we should expect? To do so we'll calculate that stat and use it as a coefficient for an exponential smoothing forecast. 

```{r}
#| fig-align: center

comp_elastic <- function(x, price_change = 0, f_periods = 3, as_df = TRUE) {
  x.ts <- create_ts(x, "qty")
  model = lm(log(qty) ~ mean_price_base + seasonal, data = x)
  delta_pct_qty = model[["coefficients"]][["mean_price_base"]]
  
  x.forecast <- ets(x.ts, model = "MAM") |> 
    forecast(f_periods) 
  
  if (as_df) {
    x.forecast <- x.forecast|>
    as.data.table() |>
    janitor::clean_names()
  
  x.forecast[,point_forecast_elastic := point_forecast * (1 + price_change * delta_pct_qty)]
  x.forecast[,price_change := price_change][,forecast_periods := 1:f_periods]
  
  }
  x.forecast
}

comp_elastic(x, as_df = F) |> autoplot() + 
  theme_minimal() + 
  labs(x = "Periods", y = "Qty")
```

The above shows forecasting without adjustments to price. Below will demonstrate a single step forecast applying a price change, which will influence forecast order quantities, compared to a model like above that does not use price changes.   

```{r}
y = lapply(seq(-40, 10, 5), \(i) comp_elastic(x, i, 1)) |>
  rbindlist()

y |>
  ggplot(aes(x = price_change)) + 
  geom_line(aes(y = point_forecast, color = "Static Forecast")) + 
  geom_line(aes(y = point_forecast_elastic, color = "Elastic Forecast")) + 
  theme_minimal() + 
  labs(x = "Change in Price", y = "Forecast", title = "Static vs. Elastic Forecasts")
```

So now that we have a model that (perhaps somewhat naively) responds to changes in pricing, we want to determine optimal profitability. To determine profitability we want to find the point at which maximum sales inersect with the highest price. 

$$
profit = (base\ price+\Delta P - standard\ cost) * elastic\ forecast
$$
This will account for the effect of price changes $\Delta P$ on expected demand. 

```{r}
std <- lehighCube::sql_query("select * from style_std_cost where style = 'G108'")

y[,base_price := x[.N, (mean_price_base)]]
y[,profit := (base_price + price_change - std$std_cost) * point_forecast_elastic]


p1 <- y |>
  ggplot(aes(x = price_change, y = profit)) + 
  geom_point() +
  theme_minimal() +
  scale_x_continuous(labels = scales::dollar_format()) + 
  scale_y_continuous(labels = scales::dollar_format())

p1
```

From our data we can fit a polynomial regression. Since we have a parabola, we want the coefficients of $a^2+bx+c$ so we can find the x value of the vertex, which will give us the price change with the highest profitability. Since the actual profit is not useful, we need only solve for x. 

$$vertex = (\frac{-b}{2a} , \frac{-D}{4a})$$

```{r}
model = lm(profit ~ poly(price_change, 2, raw = TRUE, simple = T), y[forecast_periods == 1]) 
co = coefficients(model)
intercept = -co[2] / (2*co[3])

p1 + geom_vline(aes(xintercept = intercept), linetype = 2)
```

Our intercept gives us the optimal change in price to maximize profitability. `r scales::dollar(intercept)`. We can add this intercept to the current price to get the optimal pricing strategy. `r scales::dollar(x[.N, (mean_price_base)]+intercept)` 
